---
import frameworkStyle from "./../../node_modules/cwf-lite/dist/index.css?raw";

interface Props {
  content: string;
  override?: string;
}

const { content, override } = Astro.props;
---

<cwf-component
  data-content={content}
  data-style={frameworkStyle}
  data-override={override}
>
</cwf-component>

<script>
  /**
   * Custom web component representing CWFComponent.
   * @extends HTMLElement
   */
  class CWFComponent extends HTMLElement {
    /**
     * The attribute name for data-content.
     * @type {string}
     * @private
     */
    private static readonly DATA_CONTENT_ATTRIBUTE = "data-content";

    /**
     * The attribute name for data-style.
     * @type {string}
     * @private
     */
    private static readonly DATA_STYLE_ATTRIBUTE = "data-style";

    /**
     * The attribute name for data-override.
     * @type {string}
     * @private
     */
    private static readonly DATA_OVERRIDE_ATTRIBUTE = "data-override";

    /**
     * Reference to the 'app' element within the shadow DOM.
     * @type {Element | null}
     * @private
     */
    private app: Element | null = null;

    /**
     * Object containing style information for the component.
     * @type {{ host: string; code: string; override: string }}
     * @private
     */
    private styles: { host: string; code: string; override: string } = {
      host: `
      :host {
        --size-0: 0;
        --size-1: 0.25ch;
        --size-2: 0.5ch;
        --size-3: 1ch;
        --size-4: 1.5ch;
        --size-5: 2ch;
        --size-6: 2.5ch;
        --size-7: 3ch;
        --size-8: 3.5ch;
        --size-9: 4ch;

        background-color: var(--host-background-color, white);
        color: var(--host-color, DimGrey);
        font-family: var(--host-font-family, system-ui);
        font-size: var(--host-font-size, 1rem);
        line-height: var(--host-line-height, normal);
      }
    `,
      code: "",
      override: "",
    };

    /**
     * The <style> element for applying component styles.
     * @type {HTMLStyleElement | null}
     * @private
     */
    private styleElement: HTMLStyleElement | null = null;

    /**
     * Constructs a new CWFComponent.
     */
    constructor() {
      super();
      this.attachShadow({ mode: "open" });

      const template = document.createElement("template");
      template.innerHTML = `<div id="app"></div>`;
      this.shadowRoot?.appendChild(template.content.cloneNode(true));

      this.app = this.shadowRoot?.getElementById("app") as HTMLElement | null;

      this.applyStyle();
    }

    /**
     * Defines which attributes to observe for changes.
     * @return {string[]} An array of attribute names to observe.
     * @static
     */
    static get observedAttributes() {
      return [
        CWFComponent.DATA_CONTENT_ATTRIBUTE,
        CWFComponent.DATA_STYLE_ATTRIBUTE,
        CWFComponent.DATA_OVERRIDE_ATTRIBUTE,
      ];
    }

    /**
     * Called when the component is added to the DOM.
     * Performs initial rendering based on attributes.
     */
    connectedCallback() {
      this.render();
    }

    /**
     * Called when observed attributes change.
     * @param {string} attribute - The name of the attribute that changed.
     * @param {*} _previousValue - The previous value of the attribute (unused).
     * @param {string} currentValue - The new value of the attribute.
     */
    attributeChangedCallback(
      attribute: string,
      _previousValue: any,
      currentValue: string
    ) {
      switch (attribute) {
        case CWFComponent.DATA_CONTENT_ATTRIBUTE:
          if (this.app) {
            this.app.innerHTML = currentValue;
          }
          break;
        case CWFComponent.DATA_STYLE_ATTRIBUTE:
          this.styles.code = currentValue;
          this.applyStyle();
          break;
        case CWFComponent.DATA_OVERRIDE_ATTRIBUTE:
          this.styles.override = currentValue;
          this.applyStyle();
          break;
      }
    }

    /**
     * Applies CSS styles to the component's shadow DOM.
     * If the <style> element does not exist, creates a new one and appends it.
     * Otherwise, updates the existing <style> element with the latest styles.
     * @private
     */
    private applyStyle() {
      if (!this.styleElement) {
        this.styleElement = document.createElement("style");
        this.shadowRoot?.appendChild(this.styleElement);
      }

      this.styleElement.textContent = `${this.styles.host}${this.styles.code}${this.styles.override}`;
    }

    /**
     * Renders the component based on its attributes.
     * Updates the 'app' element with 'data-content' attribute and applies initial styles.
     * @private
     */
    private render() {
      const content = this.getAttribute(CWFComponent.DATA_CONTENT_ATTRIBUTE);
      if (this.app && content !== null) {
        this.app.innerHTML = content;
      }

      const style = this.getAttribute(CWFComponent.DATA_STYLE_ATTRIBUTE);
      if (style !== null) {
        this.applyStyle();
      }
    }
  }

  // Define the custom element
  customElements.define("cwf-component", CWFComponent);
</script>
